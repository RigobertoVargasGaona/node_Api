|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||--------------------------------------------------------------------------------------------------------------------------------------------------------------------|||
|||------------------------------------------------------------------------ APIREST EN NODEJS -------------------------------------------------------------------------|||
|||--------------------------------------------------------------------------------------------------------------------------------------------------------------------|||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||                                                                                                                                                                    |||
||| --  01. ENTORNO DE DESARROLLO                                                                                                                                      |||
||| --  02. ESTRUCTURA DEL PROYECTO                                                                                                                                    |||
||| --  03. BASE DE DATOS                                                                                                                                              |||
||| --  04. CÓDIGO DEL PROYECTO                                                                                                                                        |||
||| --  05. PRUEBAS DE LA API CON POSTMAN                                                                                                                              |||
|||                                                                                                                                                                    |||
||| --  ANEXOS: TENER EN CUENTA                                                                                                                                        |||
||| --          AX_01.  Subir el Proyecto a Github                                                                                                                     |||
||| --          AX_02.  Clonar un proyecto de Github                                                                                                                   |||
||| --          AX_03.  Cambiar los puertos de 'Apache' en 'XAMPP'                                                                                                     |||
||| --          AX_04.  Cambiar los puertos de 'MySQL' en 'XAMPP'                                                                                                      |||
||| --          AX_05.  Puesta en Marcha del Proyecto                                                                                                                  |||
|||                                                                                                                                                                    |||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||                                                                                                                                                                    |||
||| --  01. ENTORNO DE DESARROLLO                                                                                                                                      |||
||| --      01.01.  Instalar Visual Studio Code                                                                                                                        |||
||| --      01.02.  Instalar Node Js                                                                                                                                   |||
||| --      01.03.  Modificar Directivas en PowerShell                                                                                                                 |||
||| --      01.04.  Instalar Git                                                                                                                                       |||
||| --      01.05.  Crear cuenta en 'Github'                                                                                                                           |||
||| --      01.06.  Instalar XAMPP                                                                                                                                     |||
||| --      01.07.  Instalar Postman                                                                                                                                   |||
||| --  02. ESTRUCTURA DEL PROYECTO                                                                                                                                    |||
||| --      02.01.  Crear la carpeta raíz del proeycto                                                                                                                 |||
||| --      02.02.  Crear el archivo para manejar las dependencias 'package.json'                                                                                      |||
||| --      02.03.  Instalar dependencias en el 'backend/'                                                                                                             |||
||| --      02.04.  Crear la estructura de carpetas y los archivos del proyecto                                                                                        |||
||| --  03. BASE DE DATOS                                                                                                                                              |||
||| --      03.01.  Codificar la base de datos 'database/db_node.sql'                                                                                                  |||
||| --      03.02.  Ejecutar la base de datos 'database/db_node.sql'                                                                                                   |||
||| --  04. CÓDIGO DEL PROYECTO                                                                                                                                        |||
||| --      04.01.  Codificar los valores de la cadena de conexión a la base de datos en 'backend/.env'                                                                |||
||| --      04.02.  Codificar la cadena de conexión en 'backend/config/config.js'                                                                                      |||
||| --      04.03.  Codificar el modelo usuarios en 'backend/models/user.js'                                                                                           |||
||| --      04.04.  Codificar la key en 'backend/config/keys.js'                                                                                                       |||
||| --      04.05.  Codificar el Jason Web Token con la key en 'backend/config/passport.js'                                                                            |||
||| --      04.06.  Codificar la API de usuarios en 'backend/controllers/userController.js'                                                                            |||
||| --      04.07.  Codificar la autenticación por JWT y Roles en 'backend/middlewares/authMiddleware.js'                                                              |||
||| --      04.08.  Codificar la ruta de usuario en 'backend/routes/userRoutes.js'                                                                                     |||
||| --      04.09.  Codificar el servidor en 'backend/server.js'                                                                                                       |||
||| --      04.10.  Codificar el inicio del backend en 'backend/index.js'                                                                                              |||
||| --      04.11.  Ejecutar el backend                                                                                                                                |||
||| --  05. PRUEBAS DE LA API CON POSTMAN                                                                                                                              |||
||| --      05.01.  Crear la Colección 'USUARIOS'                                                                                                                      |||
||| --      05.02.  Crear los métodos HTTP (GET, POST, PUT, DELETE) de la Colección 'USUARIOS'                                                                         |||
||| --      05.03.  Configurar 'GET raiz'                                                                                                                              |||
||| --      05.04.  Configurar 'POST userCreate'                                                                                                                       |||
||| --      05.05.  Configurar 'POST login'                                                                                                                            |||
||| --      05.06.  Configurar 'GET usersAll'                                                                                                                          |||
||| --      05.07.  Configurar 'GET userById'                                                                                                                          |||
||| --      05.08.  Configurar 'POST userUpdate'                                                                                                                       |||
||| --      05.09.  Configurar 'DELETE userDelete'                                                                                                                     |||
|||                                                                                                                                                                    |||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||



|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||--------------------------------------------------------------------------------------------------------------------------------------------------------------------|||
|||-------------------------------------------------------------------- 01. ENTORNO DE DESARROLLO ---------------------------------------------------------------------|||
|||--------------------------------------------------------------------------------------------------------------------------------------------------------------------|||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 01.01.  Instalar Visual Studio Code: --------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Descargar 'Visual Studio Code': https://code.visualstudio.com/download.

            02. Instalar Visual Studio Code.

                    ⦿  En el asistente de instalación dejar marcado:   ☑ 'Agregar PATH…'.                    

            03. Abrir Visual Studio Code.

            04. Instalar las siguientes extensiones en Visual Studio Code:

                    ⦿  Material Icon Theme                    
                    ⦿  Live Server  

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 01.02.  Instalar Node Js: -------------------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Descargar 'node.js': https://nodejs.org/es/.

            02. Instalar node.js.


|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 01.03.  Modificar Directivas en PowerShell: -------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Abrir el PowerShell de Windows
            
            02. Ejecutar el siguiente comando

                    ⦿  PS C:\..\..> Get-ExecutionPolicy
                    ⦿  Restricted

            03. Si aparece 'Restricted', hay que cambiarla a 'Unrestricted' de la siguiente forma:

                    ⦿  PS C:\..\..> Set-ExecutionPolicy -Scope CurrentUser

                        cmdlet Set-ExecutionPolicy en la posición 1 de la canalización de comandos
                        Proporcione valores para los parámetros siguientes:
                        ExecutionPolicy: Unrestricted

            04. Verificar la versión de 'node' y 'npm':

                    ⦿  PS C:\..\..> node --version
                    ⦿  PS C:\..\..> npm --version

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 01.04.  Instalar Git: -----------------------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Descargar 'XAMPP': https://www.apachefriends.org/es/download.html.

            02. Instalar Git.

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 01.05.  Crear cuenta en 'Github': -----------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Descargar 'XAMPP': https://www.apachefriends.org/es/download.html.

            02. Seguir los pasos de creación de la cuenta.


|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 01.06.  Instalar XAMPP: ---------------------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Descargar 'XAMPP': https://www.apachefriends.org/es/download.html.

            02. Instalar XAMPP.

            03. Abrir el 'XAMPP Control Panel' y ejecutar los servicios de 'Apache' y 'MySQL'.

                ┌ --------------------------------------------------------------------------------------------------------------------------------------- ┐
                |                                                                                                                                         |
                  NOTA:   
                    
                    ⦿  Verificar que los puertos sean: En Apache (:80) y de MySQL (:3306).
                |                                                                                                                                         |
                └ --------------------------------------------------------------------------------------------------------------------------------------- ┘


|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 01.07.  Instalar Postman: -------------------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Descargar 'Postman': https://www.postman.com/downloads/. Este programa nos sirve para realizar probar las peticiones HTTP.

            02. Instalar Postman.
            
            03. Abrir Postman.


|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||--------------------------------------------------------------------------------------------------------------------------------------------------------------------|||
|||------------------------------------------------------------------- 02. ESTRUCTURA DEL PROYECTO --------------------------------------------------------------------|||
|||--------------------------------------------------------------------------------------------------------------------------------------------------------------------|||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 02.01.  Crear la carpeta raíz del proeycto: -------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. En cualquier parte del computador (Se sugiere en el Escritorio de Windows), crear la carpeta 'proyecto'
            
            02. En el interior de la carpeta 'proyecto', crear dos más 'backend' y 'database'
            
            03. Abrir la carpeta 'proyecto' con 'Visual Studio Code'

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 02.02.  Crear el archivo para manejar las dependencias 'package.json': ----------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Abrir una terminal en Visual Studio Code ('Terminal / New Terminal' ó 'Ctrl + Shift + ñ')

            02. Cambiar el nombre de la terminal a 'backend', seleccionándola en la parte inferior derecha y presionando F2 / Rename...
            
            03. Cambiar el color de la terminal 'backend', dando click derecho / Chage Color... / Seleccionar el color
            
            04. En la Terminal de 'Visual Studio Code' digitar lo siguiente:

                    ⦿  PS C:\..\..> cd backend
                    ⦿  PS C:\..\backend> npm init

                        This utility will walk you through creating a package.json file.
                        It only covers the most common items, and tries to guess sensible defaults.

                        See `npm help init` for definitive documentation on these fields
                        and exactly what they do.

                        Use `npm install <pkg>` afterwards to install a package and
                        save it as a dependency in the package.json file.

                        Press ^C at any time to quit.
                        package name: (backend) mi-api-node
                        version: (1.0.0)
                        description: API en Node.js con Express y JWT
                        entry point: (index.js)
                        test command:
                        git repository:
                        keywords: NodeJs
                        author: Albeiro Ramos
                        license: (ISC) MIT
                        About to write to C:\Users\Instructor\Documents\_albe_\react_native\backend\package.json:

                        {
                          "name": "mi-api-node",
                          "version": "1.0.0",
                          "description": "API en Node.js con Express y JWT",
                          "main": "index.js",
                          "scripts": {
                            "test": "echo \"Error: no test specified\" && exit 1"
                          },
                          "keywords": [
                            "NodeJs"
                          ],
                          "author": "Instructor Albeiro Ramos",
                          "license": "MIT"
                        }

                        Is this OK? (yes) yes

            05. Modificar el archivo 'package.json' en la línea 8, quedando así:
            
                      1    {
                      2      "name": "mi-api-node",
                      3      "version": "1.0.0",
                      4      "description": "API en Node.js con Express y JWT",
                      5      "main": "index.js",
                      6      "scripts": {
                      7        "test": "echo \"Error: no test specified\" && exit 1",
                      8        "start": "node index.js"
                      9      },
                     10      "keywords": [
                     11        "NodeJs"
                     12      ],
                     13      "author": "Albeiro Ramos",
                     14      "license": "MIT"
                     15    }

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 02.03.  Instalar dependencias en el 'backend/': ---------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

                    ⦿  PS C:\..\backend> npm i bcryptjs@3.0.2
                    ⦿  PS C:\..\backend> npm i cors@2.8.5
                    ⦿  PS C:\..\backend> npm i dotenv
                    ⦿  PS C:\..\backend> npm i express@4.21.2
                    ⦿  PS C:\..\backend> npm i http@0.0.1-security
                    ⦿  PS C:\..\backend> npm i jsonwebtoken@9.0.2
                    ⦿  PS C:\..\backend> npm i morgan@1.10.0
                    ⦿  PS C:\..\backend> npm i mysql@2.18.1
                    ⦿  PS C:\..\backend> npm i passport@0.4.1
                    ⦿  PS C:\..\backend> npm i passport-jwt@4.0.1
                    ⦿  PS C:\..\backend> npm audit fix
                    ⦿  PS C:\..\backend> npm audit fix --force

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 02.04.  Crear la estructura de carpetas y los archivos del proyecto: ------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|                                                                                                                                                      
                                                                                                                                                      
                                                                                                                                                      # C = Carpetas
                                                                                                                                                      # A = Archivos

                        proyecto/                                             # C. Backend y Frontend de un proyecto software (web o móvil).
                        ├── backend/                                          # C. Lógica del servidor Node.js para la gestión de datos y API.
                        │   ├── config/                                       # C. Configuración del backend (base de datos, claves, autenticación).
                        │   │   ├── config.js                                 # A. Configuración principal del backend (variables de entorno, BD, etc.).
                        │   │   ├── keys.js                                   # A. Claves secretas para seguridad (JWT, OAuth, servicios externos).
                        │   │   └── passport.js                               # A. Configuración de la estrategia de autenticación con Passport.js.
                        │   ├── controllers/                                  # C. Manejan la lógica de negocio y conexión entre rutas y modelos.
                        │   │   └── userController.js                         # A. Controlador para las operaciones relacionadas con los usuarios (CRUD, login).
                        │   ├── middlewares/                                  # C. Funciones que interceptan las peticiones HTTP (autenticación, validaciones).
                        │   │   └── authMiddleware.js                         # A. Middleware para verificar autenticación/autorización de usuarios.
                        │   ├── models/                                       # C. Definición de modelos de datos que representan tablas en la base de datos.
                        │   │   └── user.js                                   # A. Esquema del modelo de usuario (campos, validaciones, consultas SQL).
            (NO CREAR)  │   ├── node_modules/                                 # C. Dependencias externas instaladas vía NPM.
                        │   ├── routes/                                       # C. Define las rutas de la API que conectan con los controladores.
                        │   │   └── userRoutes.js                             # A. Endpoints relacionados con usuarios (registro, login, CRUD).
                        │   ├── .env                                          # A. Cadena de conexión a la base de datos.
                        │   ├── index.js                                      # A. Punto principal de entrada del backend. Carga 'server.js' y arranca la app.
            (NO CREAR)  │   ├── package-lock.json                             # A. Versiones exactas de las dependencias instaladas.
            (NO CREAR)  │   ├── package.json                                  # A. Manifest del backend (nombre del proyecto, scripts, dependencias).
                        │   └── server.js                                     # A. Configuración del servidor Express (middlewares, rutas, DB, etc.).
                        └── database/                                         # C. Archivos relacionados con la base de datos.
                            └── db_node.sql                                   # A. Script SQL para crear y poblar la base de datos del proyecto.



|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||--------------------------------------------------------------------------------------------------------------------------------------------------------------------|||
|||------------------------------------------------------------------------ 03. BASE DE DATOS -------------------------------------------------------------------------|||
|||--------------------------------------------------------------------------------------------------------------------------------------------------------------------|||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 03.01. Codificar la base de datos 'database/db_node.sql': -----------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

                      1    DROP DATABASE IF EXISTS db_node;
                      2
                      3    CREATE SCHEMA db_node DEFAULT CHARACTER SET utf8 ;
                      4    USE db_node;
                      5
                      6    CREATE TABLE users (
                      7      id INT AUTO_INCREMENT PRIMARY KEY,
                      8      name VARCHAR(100) NOT NULL,
                      9      lastname VARCHAR(100) NOT NULL,
                     10      email VARCHAR(150) NOT NULL UNIQUE,
                     11      password VARCHAR(255) NOT NULL,
                     12      phone VARCHAR(20),
                     13      image VARCHAR(255),
                     14      role VARCHAR(20),
                     15      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                     16      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
                     17    ) ENGINE=InnoDB;
                     18
                     19    INSERT INTO users VALUES (
                     20      null,
                     21      "Albeiro",
                     22      "Ramos",
                     23      "profealbeiro2020@gmail.com",
                     24      "$2b$10$NR8eRuuAB12JoHe81ZYnG.i2/5k/D5TKrxc7Pk74W4rgzADdABM9G",
                     25      "3103103101",
                     26      "profile",
                     27      "admin",
                     28      null,
                     29      null
                     30    );

                ┌ --------------------------------------------------------------------------------------------------------------------------------------- ┐
                |                                                                                                                                         |
                  EXPLICACIÓN:   
                    
                    ⦿  Se usa normalmente para crear una base de datos, una tabla de usuarios y agregar un registro inicial. Este código está pensado para MySQL o MariaDB.

                |---------------------------------------------------------------------------------------------------------------------------------------- |
                
                    A.   DROP DATABASE IF EXISTS db_node;
			 Esta línea elimina la base de datos llamada db_node si ya existe, para evitar errores al crearla de nuevo. Es útil cuando quieres reiniciar todo desde cero.
                    B.   CREATE SCHEMA db_node DEFAULT CHARACTER SET utf8;
			 Crea una nueva base de datos llamada db_node y define que use el conjunto de caracteres UTF-8, que permite almacenar textos con acentos, ñ, emojis, etc.
		    C.	 SE db_node;
                         Indica que las siguientes operaciones (crear tablas, insertar datos, etc.) se hagan dentro de la base de datos db_node.
		    D. 	Esto inserta un nuevo usuario en la tabla users.

                |                                                                                                                                         |
                └ --------------------------------------------------------------------------------------------------------------------------------------- ┘


|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 03.02. Ejecutar la base de datos 'database/db_node.sql': ------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Abrir el navegador y escribir http://localhost/phpmyadmin/
            
            02. Dar click en 'Importar'
            
            03. Dar click en 'Seleccionar archivo'
            
            04. Seleccionar el archivo 'C:\..\..\proyecto\database\db_node.sql'
            
            05. Dar click en 'Importar'



|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||--------------------------------------------------------------------------------------------------------------------------------------------------------------------|||
|||--------------------------------------------------------------------- 04. CÓDIGO DEL PROYECTO ----------------------------------------------------------------------|||
|||--------------------------------------------------------------------------------------------------------------------------------------------------------------------|||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||


|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 04.01.  Codificar los valores de la cadena de conexión a la base de datos en 'backend/.env': ------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

                      1     DB_HOST=localhost
                      2     DB_USER=root
                      3     DB_PASSWORD=
                      4     DB_NAME=db_node
                      5     DB_PORT=3306
                      6
                      7     JWT_SECRET=e9f94f8d3a1e6d7c2b3f9e5a7c8d4f2b7a0e1d3c4f5b6a7e9f8d0c3b4a6d2e1

                ┌ --------------------------------------------------------------------------------------------------------------------------------------- ┐
                |                                                                                                                                         |
                  EXPLICACIÓN:   
                    
                    ⦿  Archivo de configuración tipo .env (archivo de entorno) que normalmente se usa en aplicaciones Node.js (especialmente con frameworks como Express, NestJS, etc.) para guardar variables sensibles o de configuración fuera del código fuente.

                |---------------------------------------------------------------------------------------------------------------------------------------- |
                
                    A.   DB_HOST:
			                   Dirección del servidor de base de datos. En este caso, está en la misma máquina donde corre la aplicación (localhost).
                    B.   DB_USER:
			                   Usuario con el que se conecta a la base de datos. root es el usuario por defecto en MySQL (aunque en producción se recomienda crear otro usuario con menos permisos).
		                C.   DB_PASSWORD:
			                   Contraseña del usuario de base de datos. Aquí está vacía (algo común en entornos de desarrollo local), pero nunca debe estar vacía en producción.
		                D.	 DB_NAME:
			                   Nombre de la base de datos que se va a usar. Coincide con la que creaste en el SQL anterior.
		                E.   DB_PORT:
			                   Puerto por el cual se conecta a MySQL. El puerto 3306 es el puerto estándar para MySQL.
		                F.	JWT_SECRET:
                        Clave secreta para firmar y verificar tokens JWT (JSON Web Tokens), que se usan para autenticar usuarios.
                        Esta cadena debe ser larga, aleatoria y secreta para evitar que atacantes puedan falsificar tokens. No la compartas ni la subas a GitHub.						
                |                                                                                                                                         |
                └ --------------------------------------------------------------------------------------------------------------------------------------- ┘

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 04.02.  Codificar la cadena de conexión en 'backend/config/config.js': ----------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

                      1     require('dotenv').config();
                      2     const mysql = require('mysql');
                      3     const db = mysql.createConnection({
                      4         host: process.env.DB_HOST,
                      5         user: process.env.DB_USER,
                      6         password: process.env.DB_PASSWORD,
                      7         database: process.env.DB_NAME,
                      8         port: process.env.DB_PORT
                      9     });
                     10     db.connect(function(err) {
                     11         if (err) throw err;
                     12         console.log('Base de datos conectada')
                     13     });
                     14     module.exports = db;

                ┌ --------------------------------------------------------------------------------------------------------------------------------------- ┐
                |                                                                                                                                         |
                  EXPLICACIÓN:   
                    
                    ⦿  Este bloque de código es un archivo típico en una aplicación Node.js para conectarse a una base de datos MySQL usando el módulo mysql y las variables de entorno del archivo .env.

                |---------------------------------------------------------------------------------------------------------------------------------------- |
                
                    A.   require('dotenv').config();
                         Carga las variables definidas en el archivo .env y las pone disponibles en process.env.
                         Permite mantener tus credenciales fuera del código fuente (buena práctica de seguridad y portabilidad).

                    B.   const mysql = require('mysql');
                          Importa la librería mysql para poder conectarte y trabajar con bases de datos MySQL desde Node.js.
                          Nota: La librería mysql está deprecada (ya no se mantiene). Se recomienda usar mysql2 o un ORM como Sequelize o Prisma en nuevos proyectos.
		
                    C.   const db = mysql.createConnection({
                      host: process.env.DB_HOST,
                      user: process.env.DB_USER,
                      password: process.env.DB_PASSWORD,
                        database: process.env.DB_NAME,
                        port: process.env.DB_PORT
                    });

		              	Crea una conexión a la base de datos usando los datos del archivo .env.

                    Campos:

                    host: Dirección del servidor de base de datos (e.g., localhost).
                    user: Usuario (e.g., root).
                    password: Contraseña del usuario (puede estar vacía en desarrollo).
			              database: Nombre de la base de datos (e.g., db_node).
              			port: Puerto de conexión (por defecto 3306).	

                  D.	db.connect(function(err) {
                    if (err) throw err;
                      console.log('Base de datos conectada');
                  });

                  Intenta conectar con la base de datos. Si hay un error, lanza una excepción (throw err).
                  Si se conecta correctamente, imprime en consola: Base de datos conectada.
                  Esto es útil para comprobar al inicio si tu configuración está correcta.	


                |                                                                                                                                         |
                └ --------------------------------------------------------------------------------------------------------------------------------------- ┘


|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 04.03.  Codificar el modelo usuarios en 'backend/models/user.js': ---------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

                      1     const db = require('../config/config');
                      2     const bcrypt = require('bcryptjs');
                      3     const User = {};
                      4
                      5     User.findAll = (result) => {
                      6         const sql = `SELECT id, email, name, lastname, phone, image, role, created_at, updated_at FROM users`;
                      7         db.query(sql, (err, users) => {
                      8             if (err) {
                      9                 console.log('Error al listar usuarios: ', err);
                     10                 result(err, null);
                     11             } else {
                     12                 console.log('Usuarios encontrados: ', users.length);
                     13                 result(null, users);
                     14             }
                     15         });
                     16     };
                     17
                     18     User.findById = (id, result) => {
                     19         const sql = `SELECT id, email, name, lastname, image, phone, role, password FROM users WHERE id = ?`;
                     20         db.query(sql, [id], (err, user) => {
                     21             if (err) {
                     22                 console.log('Error al consultar: ', err);
                     23                 result(err, null);
                     24             }
                     25             else {
                     26                 console.log('Usuario consultado: ',  user[0] );
                     27                 result(null, user[0]);
                     28             }
                     29         });
                     30     };
                     31
                     32     User.findByEmail = (email, result) => {
                     33         const sql = `SELECT id, email, name, lastname, image, phone, role, password FROM users WHERE email = ?`;
                     34         db.query(sql, [email], (err, user) => {
                     35             if (err) {
                     36                 console.log('Error al consultar: ', err);
                     37                 result(err, null);
                     38             }
                     39             else {
                     40                 console.log('Usuario consultado: ',  user[0] );
                     41                 result(null, user[0]);
                     42             }
                     43         });
                     44     };
                     45
                     46     User.create = async (user, result) => {
                     47         const hash = await bcrypt.hash(user.password, 10)  
                     48         const validRoles = ['admin', 'seller', 'customer', 'user'];
                     49         const role = validRoles.includes(user.role) ? user.role : 'user';
                     50         const sql = `INSERT INTO users(
                     51                         name, 
                     52                         lastname,
                     53                         email, 
                     54                         password,
                     55                         phone,
                     56                         image,
                     57                         role,
                     58                         created_at,
                     59                         updated_at
                     60                     ) VALUES (?,?,?,?,?,?,?,?,?)`;
                     61         db.query(sql,
                     62             [
                     63                 user.name,
                     64                 user.lastname,
                     65                 user.email,
                     66                 hash,
                     67                 user.phone,
                     68                 user.image,
                     69                 role,
                     70                 new Date(),
                     71                 new Date()
                     72             ], (err, res) => {
                     73                 if (err) {
                     74                     console.log('Error al crear al Usuario: ', err);
                     75                     result(err, null);
                     76                 } else {
                     77                     console.log('Usuario creado: ', {id: res.insertId, ...user});
                     78                     result(null, {id: res.insertId, ...user});
                     79                 }
                     80             }
                     81         );
                     82     };
                     83
                     84     User.update = async (user, result) => {
                     85         let fields = [];
                     86         let values = [];
                     87
                     88         if (user.password) {
                     89             const hash = await bcrypt.hash(user.password, 10);
                     90             fields.push("password = ?");
                     91             values.push(hash);
                     92         }
                     93
                     94         if (user.email) {
                     95             fields.push("email = ?");
                     96             values.push(user.email);
                     97         }
                     98         if (user.name) {
                     99             fields.push("name = ?");
                    100             values.push(user.name);
                    101         }
                    102         if (user.lastname) {
                    103             fields.push("lastname = ?");
                    104             values.push(user.lastname);
                    105         }
                    106         if (user.phone) {
                    107             fields.push("phone = ?");
                    108             values.push(user.phone);
                    109         }
                    110         if (user.image) {
                    111             fields.push("image = ?");
                    112             values.push(user.image);
                    113         }
                    114         if (user.role) {
                    115             fields.push("role = ?");
                    116             values.push(user.role);
                    117         }
                    118
                    119         fields.push("updated_at = ?");
                    120         values.push(new Date());
                    121
                    122         const sql = `UPDATE users SET ${fields.join(", ")} WHERE id = ?`;
                    123         values.push(user.id);
                    124
                    125         db.query(sql, values, (err, res) => {
                    126             if (err) {
                    127                 console.log('Error al actualizar usuario: ', err);
                    128                 result(err, null);
                    129             } else {
                    130                 console.log('Usuario actualizado: ', { id: user.id, ...user });
                    131                 result(null, { id: user.id, ...user });
                    132             }
                    133         });
                    134     };
                    135
                    136     User.delete = (id, result) => {
                    137         const sql = `DELETE FROM users WHERE id = ?`;
                    138         db.query(sql, [id], (err, res) => {
                    139             if (err) {
                    140                 console.log('Error al eliminar usuario: ', err);
                    141                 result(err, null);
                    142             } else {
                    143                 console.log('Usuario eliminado con id: ', id);
                    144                 result(null, res);
                    145             }
                    146         });
                    147     };
                    148
                    149     module.exports = User;

                ┌ --------------------------------------------------------------------------------------------------------------------------------------- ┐
                |                                                                                                                                         |
                  EXPLICACIÓN:   
                    
                    ⦿  Este archivo define un modelo de usuario (User) en Node.js, que se conecta a la base de datos y permite realizar operaciones CRUD (crear, leer, actualizar y eliminar) sobre la tabla users.

                |---------------------------------------------------------------------------------------------------------------------------------------- |
                
                    A.   IMPORTACIONES Y SETUP
                        const db = require('../config/config');
                        const bcrypt = require('bcryptjs');
                        const User = {};

                        db: Importa la conexión a la base de datos desde config/config.js.
                        bcrypt: Se usa para hashear (encriptar) contraseñas de forma segura.
                        User = {}: Objeto que va a almacenar todos los métodos relacionados con los usuarios.

                    B.  User.findAll = (result) => {
                        const sql = `SELECT ... FROM users`;
                        db.query(sql, (err, users) => {
                          if (err) {
                         console.log('Error al listar usuarios: ', err);
                         result(err, null);
                         } else {
                         console.log('Usuarios encontrados: ', users.length);
                         result(null, users);
                                }
                             });
                          };
                        Consulta todos los usuarios (excepto sus contraseñas).
                        Usa db.query() para hacer la consulta SQL.
                        El resultado se retorna usando el callback result(err, data).

                    C. User.findById = (id, result) => {
                          const sql = `SELECT ... FROM users WHERE id = ?`;
                          db.query(sql, [id], (err, user) => {
                          if (err) { ... }
                            else { result(null, user[0]); }
                          });
                        };
                          Busca un usuario por su ID.
                          Utiliza parametrización (?) para evitar inyecciones SQL.
                          Retorna el primer usuario encontrado (debería ser único).	

                    D.  User.findByEmail = (email, result) => {
                        const sql = `SELECT ... FROM users WHERE email = ?`;
                                        db.query(sql, [email], (err, user) => {
                                        if (err) { ... }
                          else { result(null, user[0]); }
                          });
                      };
                          Busca un usuario por email (clave única).
                          Se usa mucho para login o validaciones.	
		
		                E. 		El bloque define una función asíncrona llamada create dentro de un objeto User (probablemente parte de un modelo
                          o DAO - Data Access Object). Esta función toma dos argumentos: el objeto user que contiene los datos del nuevo 
                          usuario (nombre, email, contraseña, etc.) y una función result que se usa como callback para manejar el 
                          resultado de la operación (éxito o error).

                         1.	User.create = async (user, result) => {	
                            Define una nueva propiedad (o función estática) llamada create dentro del objeto User. 
                            Es una función asíncrona (async), lo que permite usar await dentro de ella. Recibe el objeto user 
                            (datos a insertar) y la función result (el callback para devolver la respuesta). 

                         2. const hash = await bcrypt.hash(user.password, 10)
                            Cifra (hashing) la contraseña. Llama a la función hash de la librería bcrypt 
                            (una librería común para el cifrado de contraseñas) con la contraseña del usuario 
                            (user.password). El 10 es el factor de salting (cost factor), que determina la fuerza 
                            del hash (un valor más alto es más lento pero más seguro). La operación es asíncrona, 
                            por eso se usa await. 

                         3.  const role = validRoles.includes(user.role) ? user.role : 'user';  
                            Valida y asigna el rol. Utiliza un operador ternario (? :). Verifica si el rol 
                            proporcionado en user.role está incluido en el array validRoles. Si es cierto, 
                            se asigna ese rol (user.role). Si es falso o si no se proporciona, se asigna el rol 
                            predeterminado 'user'. 

                         4. const sql = \INSERT INTO users(`
                            Comienza la definición de la variable sql que contendrá la consulta SQL como una plantilla de cadena 
                            (template literal). Esta consulta es para insertar un nuevo registro en la tabla users. 

                         5. name, ..., updated_at
                            Especifica la lista de columnas en la tabla users donde se insertarán los valores.
                         
                         6. `) VALUES (?,?,?,?,?,?,?,?,?)``
                            Cierra la lista de columnas e inicia la cláusula VALUES. Indica que se van a insertar 9 valores.

                         7. db.query(sql,
                            Llama a la función query del objeto db (que representa la conexión a la base de datos), para ejecutar 
                            la consulta SQL.

                         8. [ user.name, ..., new Date() ]
                            Pasa un array de valores que serán sustituidos, en orden, en los placeholders (?) de la consulta
                            SQL. Importante: Se usa la variable hash (la contraseña cifrada) en lugar de user.password. Los campos
                            created_at y updated_at se llenan con la fecha y hora actual. 

                         9. (err, res) => {    
                            Define la función callback que se ejecutará una vez que la consulta a la base de datos termine. Recibe un 
                            objeto err (error, si lo hay) y un objeto res (respuesta/resultado, si la consulta fue exitosa).

                         10. if (err) { ... } else { ... }
                            Manejo de errores y éxito.

                         11. if (err) { console.log('Error al crear...); result(err, null); }  
                            Si hay un error (err), se imprime el error en la consola y se llama a la función result (el callback) con el 
                            error y null como datos, indicando una falla.

                         12. else { console.log('Usuario creado...); result(null, {id: res.insertId, ...user}); } 
                            Si la consulta es exitosa, se imprime un mensaje de éxito con los datos del usuario. Se llama a la función 
                            result con null como error y el ID del nuevo registro (res.insertId) junto con los datos originales del usuario, 
                            indicando un éxito.  
                    F.  El bloque define la función asíncrona update dentro del objeto User. Esta función se especializa en manejar
                        la actualización parcial de un registro de usuario. Es decir, solo modifica los campos que se especifican
                        en el objeto user que recibe, dejando el resto intactos.

                        1. User.update = async (user, result) => {
                          Define la función asíncrona update en User. Recibe el objeto user (datos a actualizar, incluyendo el id) y el result 
                          (el callback).

                        2. let fields = [];
                          Inicializa un array vacío llamado fields para almacenar las partes de la cláusula SET de la consulta SQL 
                          (ej: "name = ?", "password = ?").

                        3. let values = [];
                           nicializa un array vacío llamado values para almacenar los valores correspondientes que se sustituirán en los
                           ? de la consulta.

                        4. if (user.password) {
                          Inicia una comprobación: si el objeto user incluye una nueva contraseña

                        5. const hash = await bcrypt.hash(user.password, 10);
                          Si hay contraseña, la cifra (hash) inmediatamente usando bcrypt con un factor de salting de 10.

                        6. fields.push("password = ?");
                           Agrega la parte de la consulta password = ? al array de campos a actualizar. 

                        7. values.push(hash);
                           Agrega la contraseña cifrada (hash) al array de valores.

                        8. if (user.email) { ... }, if (user.name) { ... }, etc.
                            Bloques condicionales que revisan si cada campo (email, nombre, apellido, teléfono, imagen y rol) 
                            está presente en el objeto user. Si lo está, agregan su respectiva cláusula campo = ? a fields y el 
                            valor sin cifrar a values.

                        9. fields.push("updated_at = ?");
                          grega el campo updated_at a la lista de campos. Este campo siempre se actualiza para registrar la hora del 
                          cambio. 

                       10. values.push(new Date());
                           Agrega la fecha y hora actual al array de valores para el campo updated_at.

                       11. const sql = \UPDATE users SET ${fields.join(", ")} WHERE id = ?`;`
                          Construye la consulta SQL final. Usa el array fields, uniéndolos con comas (.join(", ")), para formar la 
                          cláusula SET dinámica. La cláusula WHERE id = ? es crucial para garantizar que solo se actualice el usuario 
                          correcto. 

                       12. values.push(user.id);
                        Manejo de errores y éxito. Si hay un error, lo registra y llama al callback result(err, null). Si es exitoso, registra 
                        la acción y llama al callback result(null, { id: user.id, ...user }) devolviendo los datos del usuario actualizado.   
                    
                    G. Este código define una función llamada delete dentro del objeto User. Esta función recibe el ID del usuario a eliminar y 
                       una función de callback (result) para manejar el resultado. Su única misión es construir y ejecutar una consulta SQL para 
                       eliminar permanentemente un registro de la tabla users que coincida con el ID proporcionado.

                       1. User.delete = (id, result) => {
                          Define la función delete en el objeto User. Recibe el id del usuario que se quiere eliminar y el callback result para manejar 
                          la respuesta.
                       
                       2. const sql = \DELETE FROM users WHERE id = ?`;`
                          Define la constante sql con la consulta SQL DELETE. Esta consulta indica a la base de datos que elimine una fila de la 
                          tabla users cuya columna id coincida con el valor que se proporcionará (el placeholder ?).

                       3. db.query(sql, [id], (err, res) => {
                          Llama a la función query de la conexión a la base de datos (db). Pasa la consulta sql y el array que contiene el id (que sustituirá al ? 
                          en la cláusula WHERE). El último argumento es el callback para manejar el resultado. 

                       4. if (err) { ... } else { ... }
                          Manejo de errores y éxito. 

                       5. if (err) { console.log('Error al eliminar...); result(err, null); }
                          Si hay un error (err) durante la ejecución de la consulta, lo registra en la consola y llama al callback result con el error y null 
                          como datos de éxito. 
                       
                       6. else { console.log('Usuario eliminado...); result(null, res); }
                          Si la eliminación es exitosa, registra el ID del usuario eliminado en la consola y llama al callback result con null como error y el objeto de 
                          respuesta de la base de datos (res).

                     H. module.exports = User;
                        Exporta el objeto User (que ahora contiene las funciones create, update y delete) para que pueda ser utilizado (importado) en otras partes de la 
                        aplicación (típicamente en los controladores).                          


                |                                                                                                                                         |
                └ --------------------------------------------------------------------------------------------------------------------------------------- ┘

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 04.04.  Codificar la key en 'backend/config/keys.js': ---------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Ingrese a la siguiente página: https://www.vondy.com/random-key-generator--ZzGGMYgS?lc=5 (o en alguna página que genere códigos de 256
                bit de forma aleatoria) para generar una clave de 256 bits; cópiela y péguela en el archivo 'backend/config/keys.js', quedando de la 
                siguiente forma:

                      1     require('dotenv').config();
                      2
                      3     module.exports = {
                      4         secretOrKey: process.env.JWT_SECRET
                      5     };

                ┌ --------------------------------------------------------------------------------------------------------------------------------------- ┐
                |                                                                                                                                         |
                  EXPLICACIÓN:   
                    
                    ⦿  Su propósito principal es cargar una clave secreta para JWT desde un archivo de configuración de entorno y hacerla accesible para otras
                     partes de la aplicación.

                |---------------------------------------------------------------------------------------------------------------------------------------- |
                
                    A.   require('dotenv'): 
                         Carga el módulo de npm llamado dotenv. Este módulo es una herramienta popular que carga variables de entorno desde un archivo 
                        .env a process.env.
                    B.  .config(): Es el método que ejecuta la carga. Busca un archivo llamado .env (que no se incluye en el control de versiones, como Git)
                         en el directorio raíz de la aplicación..
                    
                    C.  module.exports = {
                        Esta es la sintaxis de CommonJS (el sistema de módulos predeterminado de Node.js) para exportar un objeto desde este archivo para que 
                        otros archivos de la aplicación puedan importarlo (usando require()).
                    
                    E.  secretOrKey: process.env.JWT_SECRET                        
                        Define una propiedad llamada secretOrKey dentro del objeto de configuración.
                        process.env.JWT_SECRET: Aquí es donde entra en juego la línea 1. Accede a la variable de entorno con el nombre JWT_SECRET que fue cargada 
                        del archivo .env y asigna su valor a la propiedad secretOrKey.

                

                                  
                |                                                                                                                                         |
                └ --------------------------------------------------------------------------------------------------------------------------------------- ┘
                    
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 04.05.  Codificar el Jason Web Token con la key en 'backend/config/passport.js': ------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

                      1     const JwtStrategy = require('passport-jwt').Strategy;
                      2     const ExtractJwt = require('passport-jwt').ExtractJwt;
                      3     const passport = require('passport');
                      4     const Keys = require('./keys');
                      5     const User = require('../models/user');
                      6
                      7     const opts = {
                      8         jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
                      9         secretOrKey: Keys.secretOrKey
                     10     };
                     11
                     12     passport.use(new JwtStrategy(opts, (jwt_payload, done) => {
                     13         User.findById(jwt_payload.id, (err, user) => {
                     14             if (err) {
                     15                 return done(err, false);
                     16             }
                     17             if (user) {
                     18                 return done(null, user);
                     19             }
                     20             else{
                     21                 return done(null, false);
                     22             }
                     23         });
                     24     }));
                     25
                     26     module.exports = passport;

                ┌ --------------------------------------------------------------------------------------------------------------------------------------- ┐
                |                                                                                                                                         |
                  EXPLICACIÓN:   
                    
                    ⦿  Este bloque de código configura la estrategia de autenticación JWT (JSON Web Token) para un framework de Node.js, muy probablemente Express.js, 
                        utilizando la popular librería de autenticación passport.

                |---------------------------------------------------------------------------------------------------------------------------------------- |
                
                    A.  const JwtStrategy = require('passport-jwt').Strategy;
                        Importa la clase Strategy específica para JWT desde el módulo passport-jwt. Esta clase se usará para definir las reglas de verificación.
                    
                    B.  const ExtractJwt = require('passport-jwt').ExtractJwt;
                        Importa el objeto ExtractJwt, que proporciona métodos para extraer el JWT de la solicitud (por ejemplo, del encabezado de autorización).  

                    C.  const passport = require('passport');
                        Importa la librería principal passport.
                    
                    D.  const Keys = require('./keys');
                        Importa el objeto que contiene la clave secreta que configuraste en el archivo anterior (secretOrKey).

                    E.  const User = require('../models/user');
                        Importa el modelo de usuario de tu base de datos (típicamente con Mongoose) para poder buscar al usuario que corresponde al token.

                    F. const opts = {
                        jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
                        secretOrKey: Keys.secretOrKey
                      };
                      Se define el objeto opts (opciones) que JwtStrategy necesita para saber dónde buscar el token y cómo verificarlo.
                          1. jwtFromRequest: 
                            Le dice a passport-jwt dónde está el token en la solicitud HTTP. En este caso, el método ExtractJwt.fromAuthHeaderAsBearerToken() busca el token en el encabezado Authorization con el formato: Authorization: Bearer <token>.
                          
                          2. secretOrKey:
                            Proporciona la clave secreta (JWT_SECRET) que se usará para descifrar y verificar la firma del token. Si la firma no coincide, significa que el token fue manipulado o no es válido.
                   
                    G. passport.use(new JwtStrategy(opts, (jwt_payload, done) => {
                          // ... Lógica de verificación ...
                        }));
                        1. passport.use(...): Registra la nueva estrategia de autenticación con passport.

                        2. new JwtStrategy(opts, (jwt_payload, done) => { ... }): 
                           Crea una nueva instancia de la estrategia. La función callback que le sigue es el corazón de la lógica de autenticación y se ejecuta solo si el token es válido y no ha expirado.

                          2.1  jwt_payload:
                               Es el contenido decodificado del token (por ejemplo, { id: 123, iat: ..., exp: ... }).

                          2.2  done: 
                                Es una función de callback que se debe llamar al finalizar la verificación.
                   
                   H. User.findById(jwt_payload.id, (err, user) => { ... });
                      Busca un usuario en la base de datos usando el id que estaba dentro del payload del token decodificado.

                        1. Si hay un error de base de datos (if (err)), llama a done(err, false), lo que indica un error y que la autenticación debe fallar.

                        2. Si se encuentra el usuario (if (user)), llama a done(null, user). Esto es exitoso: el primer argumento (null) indica que no hay error, y el segundo (user) adjunta el objeto user a la solicitud (e.g., req.user en Express).

                        3. Si el token es válido pero el usuario ya no existe en la base de datos (por ejemplo, fue eliminado), llama a done(null, false). La autenticación falla sin lanzar un error.  
                   I. module.exports = passport;
                      Exporta la instancia de passport que ahora tiene registrada la estrategia JWT. Este objeto se puede importar en los endpoints de tu aplicación para proteger rutas (por ejemplo, con passport.authenticate
                      ('jwt', { session: false })).   
                |                                                                                                                                      |
                └ --------------------------------------------------------------------------------------------------------------------------------------- ┘

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 04.06.  Codificar la API de usuarios en 'backend/controllers/userController.js': ------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

                      1     const User = require('../models/user');
                      2     const bcrypt = require('bcryptjs');
                      3     const jwt = require('jsonwebtoken');
                      4     const keys = require('../config/keys');
                      5
                      6     module.exports = {
                      7         login(req, res) {
                      8             const email = req.body.email;
                      9             const password = req.body.password;
                     10
                     11             User.findByEmail(email, async (err, myUser) => {
                     12                 if (err) {
                     13                     return res.status(501).json({
                     14                         success: false,
                     15                         message: 'Error al consultar el usuario',
                     16                         error: err
                     17                     });
                     18                 }
                     19
                     20                 if (!myUser) {
                     21                     return res.status(401).json({
                     22                         success: false,
                     23                         message: 'El email no existe en la base de datos'
                     24                     });
                     25                 }
                     26
                     27                 const isPasswordValid = await bcrypt.compare(password, myUser.password);
                     28
                     29                 if (isPasswordValid) {
                     30                     const token = jwt.sign(
                     31                         { id: myUser.id, email: myUser.email, role: myUser.role },
                     32                         keys.secretOrKey,
                     33                         { expiresIn: '1h' }
                     34                     );
                     35
                     36                     const data = {
                     37                         id: myUser.id,
                     38                         email: myUser.email,
                     39                         name: myUser.name,
                     40                         lastname: myUser.lastname,
                     41                         image: myUser.image,
                     42                         phone: myUser.phone,
                     43                         role: myUser.role,
                     44                         session_token: `JWT ${token}`
                     45                     };
                     46
                     47                     return res.status(201).json({
                     48                         success: true,
                     49                         message: 'Usuario autenticado',
                     50                         data: data
                     51                     });
                     52                 } else {
                     53                     return res.status(401).json({
                     54                         success: false,
                     55                         message: 'Contraseña o correo incorrecto'
                     56                     });
                     57                 }
                     58             });
                     59         },
                     60
                     61         getAllUsers(req, res) {
                     62             User.findAll((err, users) => {
                     63                 if (err) {
                     64                     return res.status(501).json({
                     65                         success: false,
                     66                         message: 'Error al listar usuarios',
                     67                         error: err
                     68                     });
                     69                 }
                     70                 return res.status(200).json({
                     71                     success: true,
                     72                     message: 'Lista de usuarios',
                     73                     data: users
                     74                 });
                     75             });
                     76         },
                     77
                     78         getUserById(req, res) {
                     79             const id = req.params.id;
                     80             User.findById(id, (err, user) => {
                     81                 if (err) {
                     82                     return res.status(501).json({
                     83                         success: false,
                     84                         message: 'Error al consultar el usuario',
                     85                         error: err
                     86                     });
                     87                 }
                     88                 if (!user) {
                     89                     return res.status(404).json({
                     90                         success: false,
                     91                         message: 'Usuario no encontrado'
                     92                     });
                     93                 }
                     94                 return res.status(200).json({
                     95                     success: true,
                     96                     message: 'Usuario encontrado',
                     97                     data: user
                     98                 });
                     99             });
                    100         },
                    101
                    102         register(req, res) {
                    103             const user = req.body;
                    104
                    105             if (!user.role) {
                    106                 user.role = 'user';
                    107             }
                    108
                    109             User.create(user, (err, data) => {
                    110                 if (err) {
                    111                     return res.status(501).json({
                    112                         success: false,
                    113                         message: 'Error al crear al usuario',
                    114                         error: err
                    115                     });
                    116                 } else {
                    117                     return res.status(201).json({
                    118                         success: true,
                    119                         message: 'Usuario creado correctamente',
                    120                         data: data
                    121                     });
                    122                 }
                    123             });
                    124         },
                    125
                    126         getUserUpdate(req, res) {
                    127             const user = req.body;
                    128             User.update(user, (err, data) => {
                    129                 if (err) {
                    130                     return res.status(501).json({
                    131                         success: false,
                    132                         message: 'Error al actualizar el usuario',
                    133                         error: err
                    134                     });
                    135                 }
                    136                 return res.status(200).json({
                    137                     success: true,
                    138                     message: 'Usuario actualizado',
                    139                     data: data
                    140                 });
                    141             });
                    142         },
                    143
                    144         getUserDelete(req, res) {
                    145             const id = req.params.id;
                    146             User.delete(id, (err, data) => {
                    147                 if (err) {
                    148                     return res.status(501).json({
                    149                         success: false,
                    150                         message: 'Error al eliminar el usuario',
                    151                         error: err
                    152                     });
                    153                 }
                    154                 return res.status(200).json({
                    155                     success: true,
                    156                     message: 'Usuario eliminado',
                    157                     data: data
                    158                 });
                    159             });
                    160         }
                    161     };

                ┌ --------------------------------------------------------------------------------------------------------------------------------------- ┐
                |                                                                                                                                         |
                  EXPLICACIÓN:   
                    
                    ⦿  Este es un controlador de usuarios (User Controller) típico en una aplicación Node.js/Express, que gestiona la 
                        autenticación (login, register) y las operaciones CRUD (Crear, Leer, Actualizar, Eliminar) básicas para los usuarios.

                |---------------------------------------------------------------------------------------------------------------------------------------- |
                
                    A.  const User = require('../models/user');
                        Importa el modelo User, que se encarga de manejar las operaciones con la base de datos relacionadas con los usuarios (por ejemplo, findByEmail).
                    
                    B.   const bcrypt = require('bcryptjs');
                        Importa jsonwebtoken, que permite crear y verificar tokens JWT (JSON Web Tokens), usados para autenticar usuarios.

                    C. const keys = require('../config/keys');
                        Importa un archivo de configuración (keys) donde normalmente está guardada la clave secreta usada para firmar los tokens JWT (keys.secretOrKey).

                    D.  const email = req.body.email;
                        const password = req.body.password;    
                        Extrae el email y password enviados por el usuario desde el cuerpo de la petición (req.body).

                    E. User.findByEmail(email, async (err, myUser) => {
                        ...
                        });    

                        1. Llama al método findByEmail del modelo User para buscar un usuario con el email dado.
                        2. Recibe dos argumentos:
                              err: si ocurrió un error durante la búsqueda.
                              myUser: el usuario encontrado (si existe).
                        3. if (err) {
                              return res.status(501).json({
                                success: false,
                                message: 'Error al consultar el usuario',
                                error: err
                               });
                             }
                           Si ocurre un error (por ejemplo, problema con la base de datos):
                            * Devuelve una respuesta con código 501 (error del servidor).
                            * Indica que hubo un error al consultar el usuario.  

                     F. if (!myUser) {
                          return res.status(401).json({
                              success: false,
                              message: 'El email no existe en la base de datos'
                          });
                         }   

                         Si myUser es null o undefined:
                            * Devuelve un error 401 (no autorizado).
                            * Informa que el email no está registrado.

                     G. const isPasswordValid = await bcrypt.compare(password, myUser.password);      
                        Compara la contraseña enviada (password) con la contraseña encriptada guardada en la base de datos (myUser.password).
                        Devuelve true si coinciden, false si no. 

                     H. if (isPasswordValid) {
                          const token = jwt.sign(
                              { id: myUser.id, email: myUser.email, role: myUser.role },
                              keys.secretOrKey,
                              { expiresIn: '1h' }
                          );   
                        1. jwt.sign(payload, secret, options) genera un token JWT.

                        2. Payload: { id, email, role } → información que se incluirá en el token.

                        3. Secret: keys.secretOrKey → clave secreta para firmar el token.

                        4. Options: { expiresIn: '1h' } → el token expirará en 1 hora.

                     I. const data = {
                            id: myUser.id,
                            email: myUser.email,
                            name: myUser.name,
                            lastname: myUser.lastname,
                            image: myUser.image,
                            phone: myUser.phone,
                            role: myUser.role,
                            session_token: `JWT ${token}`
                        };

                        1. Se crea un objeto data con toda la información relevante del usuario y el token de sesión.
                        2. session_token guarda el token generado, precedido de "JWT " para seguir un formato estándar en encabezados HTTP.

                      H. return res.status(201).json({
                              success: true,
                              message: 'Usuario autenticado',
                              data: data
                          });

                         1. Devuelve una respuesta con código 201 (creado correctamente). 
                         2. Indica que el usuario se autenticó exitosamente.
                         3. Incluye los datos del usuario y su token.
                      I. } else {
                                return res.status(401).json({
                                    success: false,
                                    message: 'Contraseña o correo incorrecto'
                                });
                            }   

                         1.  Si isPasswordValid es false:
                         2.  Devuelve error 401 (no autorizado).
                         3.  Indica que las credenciales son incorrectas.  
                     
                      J.  return res.status(200).json({
                              success: true,
                              message: 'Lista de usuarios',
                              data: users
                          }); 

                          Si no hubo error, responde con:

                          Código HTTP 200 (OK).
                          Un JSON con:
                          success: true → indica éxito.
                          message → mensaje descriptivo.
                          data: users → la lista de usuarios obtenida desde la base de datos.

                      K. Su función es buscar un usuario específico en la base de datos, según el ID que viene en la URL

                         1. getUserById(req, res) {
                          Define la función getUserById, que recibe los objetos:
                            req: la solicitud HTTP (request).
                            res: la respuesta HTTP (response).

                         2. const id = req.params.id;
                            Obtiene el parámetro id de la URL.
                            Ejemplo: si la ruta es /users/5, entonces req.params.id será "5".
                            Guarda ese valor en una constante llamada id. 

                         3.  User.findById(id, (err, user) => {
                             Llama al método findById del modelo User para buscar un usuario en la base de datos con ese id.

                              El método recibe dos argumentos:
                              id: el identificador del usuario.
                              Un callback que recibe:
                              err: error en caso de que ocurra algo durante la búsqueda.
                              user: el usuario encontrado (o null/undefined si no existe).   
                         4.  if (err) {
                             Verifica si ocurrió un error al realizar la consulta en la base de dato


                         5. return res.status(501).json({
                                success: false,
                                message: 'Error al consultar el usuario',
                                error: err
                            });
                            - Si hay un error, detiene la ejecución y envía una respuesta HTTP con código 501 (Error Interno del Servidor), 
                            - que indica un problema al procesar la solicitud.
                            - Indica en el cuerpo de la respuesta que la operación falló.
                            - Proporciona un mensaje descriptivo del error.
                            - Incluye el objeto de error detallado para facilitar la depuración.

                         6. if (!user) {
                                  return res.status(404).json({
                                      success: false,
                                      message: 'Usuario no encontrado'
                                  });
                              }

                            - Si no se encuentra, detiene la ejecución y envía una respuesta HTTP con código 404 (No Encontrado).
                            - Indica que la operación de encontrar fue infructuosa.
                            - Proporciona un mensaje que indica que el recurso no existe.
                            - Cierra el objeto JSON y la respuesta.
                            - Cierra el bloque if (!user).

                         7.  return res.status(200).json({
                                  success: true,
                                  message: 'Usuario encontrado',
                                  data: user
                              });   
                            - Si el usuario fue encontrado (los bloques if anteriores no se ejecutaron), envía una respuesta HTTP con código 200 
                              (OK), indicando éxito.
                            - Indica que la operación fue exitosa.
                            - Proporciona un mensaje de éxito.
                            - Incluye el objeto del usuario recuperado de la base de datos.
                            - Cierra el objeto JSON y la respuesta.
                            - Cierra el callback de User.findById.
                       L. Este código es un controlador de registro que se encarga de recibir los datos de un nuevo usuario y guardarlos en la base 
                          de datos. 

                          1. register(req, res) {
                             Define la función controladora. Recibe el objeto de la petición (req) y el objeto de la respuesta (res).

                          2. const user = req.body;
                               Extrae los datos que el cliente envió en el cuerpo de la petición (el body). Estos datos (nombre, email, contraseña, etc.)
                                se almacenan en la variable user.  
                          
                          3. if (!user.role) {
                             Comprueba si el objeto user no incluye un campo para el rol (role). Esto es para asignar un rol por defecto.
                          
                          4. user.role = 'user';
                             Si el rol no se especificó en la petición, asigna el rol por defecto como 'user' al nuevo registro.

                          5. User.create(user, (err, data) => {
                              Llama al método estático create del modelo User (Mongoose). Este método intenta crear y guardar un nuevo documento en 
                              la base de datos utilizando el objeto user. Recibe un callback con un posible error (err) o los datos del usuario recién 
                              creado (data).

                          6. if (err) {
                             Comprueba si ocurrió un error durante el intento de creación (ej. campos requeridos faltantes, validación fallida, email 
                             duplicado, error de conexión a la BD). 

                             - return res.status(501).json({ // Si hay un error, detiene la ejecución y envía una respuesta HTTP con código 501 (Error Interno del Servidor).      
                             - success: false,// Indica que la operación falló.
                             - message: 'Error al crear al usuario'// Proporciona un mensaje que indica el fallo en la creación.
                             - error: err //incluye el objeto de error detallado para la depuración.
                             - } else {//	Si no hubo un error (err es null), se ejecuta este bloque, que es la respuesta de éxito.
                             - return res.status(201).json({	//Detiene la ejecución y envía una respuesta HTTP con código 201 (Created). El código 201 es el estándar HTTP para 
                               una creación exitosa de un nuevo recurso.
                             - success: true,	//Indica que la operación fue exitosa.
                             - message: 'Usuario creado correctamente',	//Proporciona un mensaje de confirmación.
                             - data: data//	Incluye los datos del usuario recién creado (incluyendo el _id asignado por la base de datos).
                             - });//Cierra el callback de User.create.
                             - },	Cierra la definición de la función register.

                      M. Se encarga de actualizar la información de un usuario existente en la base de datos.
                          
                          1.  getUserUpdate(req, res) {
                              Define la función controladora que manejará la petición de actualización. Recibe la petición (req) y la respuesta (res).

                             - const user = req.body; //	Extrae los datos que contienen los nuevos valores para el usuario (por ejemplo, nuevo nombre, nueva contraseña, etc.) del cuerpo
                               de la petición (req.body). Estos datos se guardan en la variable user.  
                             - User.update(user, (err, data) => {	//Llama al método update del modelo User. Este método intenta modificar un registro en la base de datos
                               con los datos proporcionados en el objeto user. 
                             - if (err) {	//Comprueba si ocurrió un error al intentar realizar la actualización (ej. error de validación, error de base de datos).

                             - return res.status(501).json({	///Si hay un error, detiene la ejecución y responde con el código 501 (Error Interno del Servidor).

                             - success: false,	//Indica que la operación de actualización falló.

                             - message: 'Error al actualizar el usuario',	//Proporciona un mensaje descriptivo del fallo.

                             - error: err	//Incluye el objeto de error detallado para la depuración.

                             - return res.status(200).json({	Si la actualización fue exitosa, detiene la ejecución y envía una respuesta HTTP con código 200 (OK), 
                               que es común para las operaciones de modificación (PUT/PATCH).  

                             - success: true,	// Indica que la operación fue exitosa.
                
                             -	message: 'Usuario actualizado',	//Proporciona un mensaje de confirmación. 
                             data: data	Incluye los datos devueltos por la base de datos, que en el caso de Mongoose update suele ser información sobre la cantidad de documentos modificados.

                             -	});	//Cierra el callback de User.update.

                             -	},	//Cierra la definición de la función getUserUpdate. 
                      
                      N. se encarga de eliminar un usuario de la base de datos utilizando el ID proporcionado en la URL.

                          1. getUserDelete(req, res) {	Define la función controladora que maneja la solicitud de eliminación.
                             Recibe la petición (req) y la respuesta (res). 

                             - const id = req.params.id; //	Extrae el ID del usuario a eliminar de los parámetros de la URL 
                               (req.params.id). Este ID identifica al usuario objetivo.

                             - User.delete(id, (err, data) => {	// Llama al método delete del modelo User. Este método intenta eliminar el documento de la base de datos que corresponde al id 
                                proporcionado. Recibe un callback con un posible error (err) o los datos del resultado de la operación (data). 

                            - if (err) {	// Comprueba si ocurrió un error al intentar la eliminación (ej. error de conexión a la BD, permisos).

                            -return res.status(501).json({ //	Si hay un error, detiene la ejecución y responde con el código 501 (Error Interno del Servidor).

                            - success: false,	// Indica que la operación falló.

                            - message: 'Error al eliminar el usuario',	// Proporciona un mensaje descriptivo del fallo.

                            - error: err	//Incluye el objeto de error detallado para la depuración.

                            - return res.status(200).json({	//Si la eliminación fue exitosa, detiene la ejecución y envía una respuesta HTTP con código 200 (OK), 
                              que es un código de éxito estándar para las operaciones de eliminación (DELETE).

                            - success: true,	//Indica que la operación fue exitosa.

                            - message: 'Usuario eliminado',//	Proporciona un mensaje de confirmación. 

                            - data: data	Incluye los datos devueltos por la base de datos, que generalmente 
                              contienen información sobre cuántos documentos fueron eliminados. 

                            - });	//Cierra el callback de User.delete.

17	                        -  }//	Cierra la definición de la función getUserDelete.  
                |                                                                                                                                         |
                └ --------------------------------------------------------------------------------------------------------------------------------------- ┘


|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 04.07.  Codificar la autenticación por JWT y Roles en 'backend/middlewares/authMiddleware.js': ----------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

                      1     const jwt = require('jsonwebtoken');
                      2     const keys = require('../config/keys');
                      3
                      4     function verifyToken(req, res, next) {
                      5         const authHeader = req.headers['authorization'];
                      6         if (!authHeader) {
                      7             return res.status(403).json({
                      8                 success: false,
                      9                 message: 'No se proporcionó un token'
                     10             });
                     11         }
                     12
                     13         const token = authHeader.split(' ')[1];
                     14         if (!token) {
                     15             return res.status(403).json({
                     16                 success: false,
                     17                 message: 'Formato de token inválido'
                     18             });
                     19         }
                     20
                     21         jwt.verify(token, keys.secretOrKey, (err, decoded) => {
                     22             if (err) {
                     23                 return res.status(401).json({
                     24                     success: false,
                     25                     message: 'Token inválido o expirado',
                     26                     error: err
                     27                 });
                     28             }
                     29             req.user = decoded;
                     30             next();
                     31         });
                     32     }
                     33
                     34     function authorizeRoles(roles) {
                     35         return (req, res, next) => {
                     36             if (!req.user || !roles.includes(req.user.role)) {
                     37                 return res.status(403).json({
                     38                     success: false,
                     39                     message: `Acceso denegado: se requiere rol ${roles.join(' o ')}`
                     40                 });
                     41             }
                     42             next();
                     43         };
                     44     }
                     45
                     46     module.exports = {
                     47         verifyToken,
                     48         authorizeRoles
                     49     };

                ┌ --------------------------------------------------------------------------------------------------------------------------------------- ┐
                |                                                                                                                                         |
                  EXPLICACIÓN:   
                    Este fragmento de código es crucial en aplicaciones web modernas, ya que implementa un middleware de seguridad para verificar un token de autenticación, 
                    típicamente un JWT (JSON Web Token).
                    Esta función, llamada verifyToken, se ejecuta antes de que el servidor procese una solicitud a una ruta protegida.


                | 
                |---------------------------------------------------------------------------------------------------------------------------------------- |
                
                 A. const jwt = require('jsonwebtoken');	
                    Importa la librería jsonwebtoken, que se usa para crear, firmar y verificar tokens JWT
                 
                 B. const jwt = require('jsonwebtoken');	
                    Importa la librería jsonwebtoken, que se usa para crear, firmar y verificar tokens JWT

                 C. function verifyToken(req, res, next) {	
                     Define la función middleware. Los middlewares en Express reciben la petición (req), la respuesta 
                     (res) y una función next() que indica que deben continuar con la siguiente función en la cadena de manejo de la ruta.   

                    1. const authHeader = req.headers['authorization'];//	Extrae el encabezado de la petición llamado Authorization. Los tokens 
                       JWT suelen enviarse aquí en el formato: Bearer <token>

                    2. if (!authHeader) { //	Comprueba si el encabezado Authorization no fue proporcionado en la petición.   
                       
                       - return res.status(403).json({	Si falta el encabezado, detiene la ejecución y responde con código 403 (Forbidden - Prohibido/Acceso denegado).     
                       - message: 'No se proporcionó un token'	Explica por qué se deniega el acceso.

                    3. const token = authHeader.split(' ')[1];	Si el encabezado existe, lo divide por el espacio ( ). Asume el formato Bearer <token> y toma el 
                       segundo elemento, que es el token JWT puro.  

                       - if (!token) {	Comprueba si después de dividir, el token no se pudo extraer (ej. si el encabezado solo decía "Bearer" sin token).  
                       - return res.status(403).json({	Si el formato es incorrecto, detiene la ejecución y responde con código 403.
                       - message: 'Formato de token inválido'	Explica el error.

                    4 jwt.verify(token, keys.secretOrKey, (err, decoded) => {	Llama a la función de verificación de la librería jsonwebtoken. Intenta decodificar el token
                      usando la clave secreta. Recibe un callback con un posible error (err) o el contenido decodificado del token (decoded).    

                       - if (err) {	Comprueba si la verificación falló (ej. el token fue alterado, la firma no coincide o el token ha expirado).
                       - return res.status(401).json({	Si la verificación falla, detiene la ejecución y responde con código 401 (Unauthorized - No autorizado).
                       - message: 'Token inválido o expirado',	Proporciona un mensaje de acceso denegado por token incorrecto.
                       - }	Cierra el bloque de error.
                    
                    5. req.user = decoded;	Si la verificación es exitosa, el contenido decodificado del token (que contiene datos como el ID del usuario) se adjunta al objeto req. 
                       Ahora, las rutas que vengan después podrán acceder a req.user.

                       - next();	Llama a next(). Esto es fundamental: le indica a Express que el middleware de verificación terminó y que debe continuar ejecutando el siguiente 
                        controlador de la ruta solicitada. 
                       - });	Cierra el callback de jwt.verify.
                       - }	Cierra la definición de la función verifyToken



                |                                                                                                                                     |
                └ --------------------------------------------------------------------------------------------------------------------------------------- ┘

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 04.08.  Codificar la ruta de usuario en 'backend/routes/userRoutes.js': ---------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

                      1     const express = require('express');
                      2     const router = express.Router();
                      3     const userController = require('../controllers/userController');
                      4     const { verifyToken, authorizeRoles } = require('../middlewares/authMiddleware');
                      5
                      6     // Rutas públicas
                      7     router.post('/create', userController.register);
                      8     router.post('/login', userController.login);
                      9
                     10     // Rutas protegidas
                     11     router.get('/', verifyToken, authorizeRoles(['admin', 'seller']), userController.getAllUsers);
                     12     router.get('/:id', verifyToken, authorizeRoles(['admin', 'seller']), userController.getUserById);
                     13     router.put('/:id', verifyToken, authorizeRoles(['admin', 'seller']), userController.getUserUpdate);
                     14     router.delete('/delete/:id', verifyToken, authorizeRoles(['admin']), userController.getUserDelete);
                     15
                     16     module.exports = router;

                ┌ --------------------------------------------------------------------------------------------------------------------------------------- ┐
                |                                                                                                                                         |
                  EXPLICACIÓN:   
                    
                    ⦿  XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.

                |---------------------------------------------------------------------------------------------------------------------------------------- |
                
                    A.   XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.
                    B.   XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.
                |                                                                                                                                         |
                └ --------------------------------------------------------------------------------------------------------------------------------------- ┘

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 04.09.  Codificar el servidor en 'backend/server.js': ---------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

                      1     // server.js
                      2     const express = require('express');
                      3     const logger = require('morgan');
                      4     const cors = require('cors');
                      5     const usersRoutes = require('./routes/userRoutes');
                      6
                      7     const app = express();
                      8
                      9     // Middlewares globales
                     10     app.use(logger('dev'));
                     11     app.use(express.json());
                     12     app.use(express.urlencoded({ extended: true }));
                     13     app.use(cors());
                     14
                     15     // Rutas
                     16     app.use('/api/users', usersRoutes);
                     17
                     18     // Endpoints de prueba
                     19     app.get('/', (req, res) => {
                     20         res.send('Ruta raíz del Backend');
                     21     });
                     22
                     23     app.get('/test', (req, res) => {
                     24         res.send('Ruta TEST');
                     25     });
                     26
                     27     // Manejo de errores
                     28     app.use((err, req, res, next) => {
                     29         console.log(err);
                     30         res.status(err.status || 500).send(err.stack);
                     31     });
                     32
                     33     // Exportamos la app para que la use index.js
                     34     module.exports = app;

                ┌ --------------------------------------------------------------------------------------------------------------------------------------- ┐
                |                                                                                                                                         |
                  EXPLICACIÓN:   
                    
                    ⦿  XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.

                |---------------------------------------------------------------------------------------------------------------------------------------- |
                
                    A.   XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.
                    B.   XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.
                |                                                                                                                                         |
                └ --------------------------------------------------------------------------------------------------------------------------------------- ┘

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 04.10.  Codificar el inicio del backend en 'backend/index.js': ------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

                      1     const http = require('http');
                      2     const app = require('./server');
                      3     
                      4     const port = process.env.PORT || 3000;
                      5     const host = process.env.HOST || 'localhost';
                      6     
                      7     app.set('port', port);
                      8     
                      9     const server = http.createServer(app);
                     10     
                     11     server.listen(port, host, () => {
                     12       console.log(`Servidor corriendo en http://${host}:${port}`);
                     13     });

                ┌ --------------------------------------------------------------------------------------------------------------------------------------- ┐
                |                                                                                                                                         |
                  EXPLICACIÓN:   
                    
                    ⦿  XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.

                |---------------------------------------------------------------------------------------------------------------------------------------- |
                
                    A.   XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.
                    B.   XXXXXXXXXXXXXXXXXXXXXXXXXXXXX.
                |                                                                                                                                         |
                └ --------------------------------------------------------------------------------------------------------------------------------------- ┘


|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 04.11.  Ejecutar el backend: ----------------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Iniciar el servidor 'backend' desde la terminal de Visual Studio Code.

                    ⦿  PS C:\..\backend> node index.js
            
            02. Debe aparecer en la terminal, texto similar a lo siguiente:
            
                        [dotenv@17.2.3] injecting env (6) from .env -- tip: 🛠️  run anywhere with `dotenvx run -- yourcommand`
                        [dotenv@17.2.3] injecting env (0) from .env -- tip: 🔐 encrypt with Dotenvx: https://dotenvx.com
                        Servidor corriendo en http://localhost:3000
                        Base de datos conectada

                    ⦿  Para detener el servidor, ubíquese en la terminal de Visual Studio Code y presione 'CTRL + C'.



|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||--------------------------------------------------------------------------------------------------------------------------------------------------------------------|||
|||---------------------------------------------------------------- 05. PRUEBAS DE LA API CON POSTMAN -----------------------------------------------------------------|||
|||--------------------------------------------------------------------------------------------------------------------------------------------------------------------|||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||


|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 05.01.  Crear la Colección 'USUARIOS': ------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Dar click en 'New / Collection'
            
            02. Dar click en 'New Collection' y escribir 'USUARIOS'

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 05.02.  Crear los métodos HTTP (GET, POST, PUT, DELETE) de la Colección 'USUARIOS': ---------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Dar click en los tres puntos (...) que están ubicados al lado derecho de 'USUARIOS' (En el Panel Lateral Izquierdo) y seleccionar 'Add request'
            
            02. Dar click en los tres puntos (...) que están ubicados al lado derecho de 'GET New Request' y seleccionar 'Rename', escribir 'raiz'
            
            03. Repetir los pasos 01 y 02 para el método: 'userCreate', 'login', 'usersAll', 'userById', 'userCreate', 'userUpdate' y 'userDelete'

            04. Seleccionar el método 'userCreate' / dar click al control de lista 'GET   ▼' / Seleccionar 'POST' / Presionar 'CTRL + S'
            
            05. Seleccionar el método 'login' / dar click al control de lista 'GET   ▼' / Seleccionar 'POST' / Presionar 'CTRL + S'
            
            06. Seleccionar el método 'userUpdate' / dar click al control de lista 'GET   ▼' / Seleccionar 'PUT' / Presionar 'CTRL + S'
            
            07. Seleccionar el método 'userDelete' / dar click al control de lista 'GET   ▼' / Seleccionar 'DELETE' / Presionar 'CTRL + S'
           
            

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 05.03.  Configurar 'GET raiz': --------------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Seleccionar el método 'GET raiz'
            
            02. Escribir en el control de texto (al frente de 'GET   ▼' | Enter URL or describe the request to Postbot |) la URL de la API: 'localhost:3000'

            03. Dar click en 'Send'
            
            04. Verificar que la parte inferior aparezca el siguiente código:

                      1   Ruta raíz del Backend

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 05.04.  Configurar 'POST userCreate': -------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Seleccionar el método 'POST userCreate'
            
            02. Escribir en el control de texto (al frente de 'POST   ▼' | Enter URL or describe the request to Postbot |) la URL de la API 
                (ENDPOINT: /api/users/create): 'localhost:3000/api/users/create'

            03. Dar click en 'Body / raw / JSON'
            
            04. Escribir el siguiente arreglo (clave: valor) en formato JSON:

                      1   {
                      2     "email": "user@sistema.com",
                      3     "name": "Usuario",
                      4     "lastname": "Sistema",
                      5     "phone": "3103103101",
                      6     "image": "yyyy",
                      7     "password": "12345"
                      8   }
            
            05. Dar click en 'Send'
            
            06. Verificar que la parte inferior aparezca el siguiente código:

                      1    {
                      2        "success": true,
                      3        "message": "Usuario creado correctamente",
                      4        "data": {
                      5            "id": 1,
                      6            "email": "user@sistema.com",
                      7            "name": "Usuario",
                      8            "lastname": "Sistema",
                      9            "phone": "3103103101",
                     10            "image": "yyyy",
                     11            "password": "12345",
                     12            "role": "user"
                     13        }
                     14    }

            07. Ir a 'http://localhost/phpmyadmin/', para verificar que en la base de datos 'db_node' (tabla 'users'), se haya creado el registro
              
            08. Repetir los pasos 4, 5 y 7 con el siguiente arreglo (clave: valor) en formato JSON:

                      1    {
                      2        "email": "customer@sistema.com",
                      3        "name": "Customer",
                      4        "lastname": "Sistema",
                      5        "phone": "3113113111",
                      6        "image": "yyyy",
                      7        "role": "customer",
                      8        "password": "12345"
                      9    }              
              
            09. Verificar que la parte inferior aparezca el siguiente código:

                      1    {
                      2        "success": true,
                      3        "message": "Usuario creado correctamente",
                      4        "data": {
                      5            "id": 2,
                      6            "email": "customer@sistema.com",
                      7            "name": "Customer",
                      8            "lastname": "Sistema",
                      9            "phone": "3113113111",
                     10            "image": "yyyy",
                     11            "role": "customer",
                     12            "password": "12345"
                     13        }
                     14    }

            10. Repetir los pasos 4, 5 y 7 con el siguiente arreglo (clave: valor) en formato JSON:

                      1    {
                      2        "email": "seller@sistema.com",
                      3        "name": "Seller",
                      4        "lastname": "Sistema",
                      5        "phone": "3123123121",
                      6        "image": "yyyy",
                      7        "role": "seller",
                      8        "password": "12345"
                      9    }              
              
            11. Verificar que la parte inferior aparezca el siguiente código:

                      1    {
                      2        "success": true,
                      3        "message": "Usuario creado correctamente",
                      4        "data": {
                      5            "id": 3,
                      6            "email": "seller@sistema.com",
                      7            "name": "Seller",
                      8            "lastname": "Sistema",
                      9            "phone": "3123123121",
                     10            "image": "yyyy",
                     11            "role": "seller",
                     12            "password": "12345"
                     13        }
                     14    }
            
            12. Repetir los pasos 4, 5 y 7 con el siguiente arreglo (clave: valor) en formato JSON:

                      1    {
                      2        "email": "admin@sistema.com",
                      3        "name": "Admin",
                      4        "lastname": "Sistema",
                      5        "phone": "3133133131",
                      6        "image": "yyyy",
                      7        "role": "admin",
                      8        "password": "12345"
                      9    }              
              
            13. Verificar que la parte inferior aparezca el siguiente código:

                      1    {
                      2        "success": true,
                      3        "message": "Usuario creado correctamente",
                      4        "data": {
                      5            "id": 4,
                      6            "email": "admin@sistema.com",
                      7            "name": "Admin",
                      8            "lastname": "Sistema",
                      9            "phone": "3133133131",
                     10            "image": "yyyy",
                     11            "role": "admin",
                     12            "password": "12345"
                     13        }
                     14    }
            
            14. Repetir los pasos 4, 5 y 7 con el siguiente arreglo (clave: valor) en formato JSON:

                      1    {
                      2        "email": "other@sistema.com",
                      3        "name": "Other",
                      4        "lastname": "Sistema",
                      5        "phone": "3143143141",
                      6        "image": "yyyy",
                      7        "role": "other",
                      8        "password": "12345"
                      9    }              
              
            15. Verificar que la parte inferior aparezca el siguiente código:

                      1    {
                      2        "success": true,
                      3        "message": "Usuario creado correctamente",
                      4        "data": {
                      5            "id": 5,
                      6            "email": "other@sistema.com",
                      7            "name": "Other",
                      8            "lastname": "Sistema",
                      9            "phone": "3143143141",
                     10            "image": "yyyy",
                     11            "role": "other",
                     12            "password": "12345"
                     13        }
                     14    }

                ┌ --------------------------------------------------------------------------------------------------------------------------------------- ┐
                |                                                                                                                                         |
                  NOTA:   
                    
                    ⦿  Note que 'http://localhost/phpmyadmin/', en la base de datos 'db_node' (tabla 'users'), en el registro creado, en la columna
                        'role', aparece 'user' en lugar de 'other'; esto se debe a que en 'backend/models/user.js' en las líneas 48 y 49, se está 
                        validando que únicamente los roles pueden ser: 'admin', 'seller', 'customer', 'user'; de lo contrario escribe 'user'
                |                                                                                                                                         |
                └ --------------------------------------------------------------------------------------------------------------------------------------- ┘


|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 05.05.  Configurar 'POST login': ------------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Seleccionar el método 'POST login'
            
            02. Escribir en el control de texto (al frente de 'POST   ▼' | Enter URL or describe the request to Postbot |) la URL de la API 
                (ENDPOINT: /api/users/login): 'localhost:3000/api/users/login'

            03. Dar click en 'Body / raw / JSON'
            
            04. Escribir el siguiente arreglo (clave: valor) en formato JSON:

                      1    {
                      2        "email": "user@sistema.com",
                      3        "password": "12345"
                      4    }
            
            05. Dar click en 'Send'
            
            06. Verificar que la parte inferior aparezca el siguiente código:

                      1    {
                      2        "success": true,
                      3        "message": "Usuario autenticado",
                      4        "data": {
                      5            "id": 1,
                      6            "email": "user@gmail.com",
                      7            "name": "Usuario",
                      8            "lastname": "Sistema",
                      9            "image": "yyyy",
                     10            "phone": "3103103101",
                     11            "role": "user",
                     12            "session_token": "JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.
                                                     eyJpZCI6MSwiZW1haWwiOiJ1c2VyQGdtYWlsLmNvbSIsInJvbGUiOiJ1c2VyIiwiaWF0IjoxNzU5MzcwNTE4LCJleHAiOjE3NTkzNzQxMTh9.
                                                     2oJDO0HIsol2TKHD4JBzsrRuXFeCv76e7eqJCzKOpEY"
                     13        }
                     14    }

            07. Copiar todo el código que está entre comillas del "session_token" de la línea 12

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 05.06.  Configurar 'GET usersAll': ----------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Seleccionar el método 'GET usersAll'
            
            02. Escribir en el control de texto (al frente de 'GET   ▼' | Enter URL or describe the request to Postbot |) la URL de la API 
                (ENDPOINT: /api/users): 'localhost:3000/api/users'

            03. Dar click en 'Send'
            
            04. En la parte inferior debe aparecer el siguiente código:

                      1    {
                      2        "success": false,
                      3        "message": "No se proporcionó un token"
                      4    }

            05. Dar click en 'Headers', en 'Key' escribir 'Authorization' y en 'Value' pegar el 'JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...' 

            06. Dar click en 'Send'

            07. En la parte inferior debe aparecer el siguiente código:

                      1    {
                      2        "success": false,
                      3        "message": "Acceso denegado: se requiere rol admin o seller"
                      4    }
            
            08. Repetir los pasos 4, 5, 6 y 7 del apartado: '05.05.  Configurar 'POST login'' para loguearse como 'customer':

                      1    {
                      2        "email": "customer@sistema.com",
                      3        "password": "12345"
                      4    }
            
            09. Repetir los pasos 5 y 6 de este mismo apartado. En la parte inferior debe aparecer el siguiente còdigo:

                      1    {
                      2        "success": false,
                      3        "message": "Acceso denegado: se requiere rol admin o seller"
                      4    }

            10. Repetir los pasos 4, 5, 6 y 7 del apartado: '05.05.  Configurar 'POST login'' para loguearse como 'seller':

                      1    {
                      2        "email": "seller@sistema.com",
                      3        "password": "12345"
                      4    }
            
            11. Repetir los pasos 5 y 6 de este mismo apartado. En la parte inferior debe aparecer el siguiente còdigo:

                      1    {
                      2        "success": true,
                      3        "message": "Lista de usuarios",
                      4        "data": [
                      5            {
                      6                "id": 1,
                      7                "email": "user@sistema.com",
                      8                "name": "User",
                      9                "lastname": "Sistema",
                     10                "phone": "3103103101",
                     11                "image": "yyyy",
                     12                "role": "user",
                     13                "created_at": "2025-10-02T09:15:59.000Z",
                     14                "updated_at": "2025-10-02T09:15:59.000Z"
                     15            },
                     16            {
                     17                "id": 2,
                     18                "email": "customer@sistema.com",
                     19                "name": "Customer",
                     20                "lastname": "Sistema",
                     21                "phone": "3113113111",
                     22                "image": "yyyy",
                     23                "role": "customer",
                     24                "created_at": "2025-10-02T09:17:09.000Z",
                     25                "updated_at": "2025-10-02T09:17:09.000Z"
                     26            },
                     27            {
                     28                "id": 3,
                     29                "email": "seller@sistema.com",
                     30                "name": "Seller",
                     31                "lastname": "Sistema",
                     32                "phone": "3113113111",
                     33                "image": "yyyy",
                     34                "role": "seller",
                     35                "created_at": "2025-10-02T09:26:11.000Z",
                     36                "updated_at": "2025-10-02T09:26:11.000Z"
                     37            },
                     38            {
                     39                "id": 4,
                     40                "email": "admin@sistema.com",
                     41                "name": "Admin",
                     42                "lastname": "Sistema",
                     43                "phone": "3133133131",
                     44                "image": "yyyy",
                     45                "role": "admin",
                     46                "created_at": "2025-10-02T09:27:19.000Z",
                     47                "updated_at": "2025-10-02T09:27:19.000Z"
                     48            },
                     49            {
                     50                "id": 5,
                     51                "email": "other@sistema.com",
                     52                "name": "Other",
                     53                "lastname": "Sistema",
                     54                "phone": "3143143141",
                     55                "image": "yyyy",
                     56                "role": "user",
                     57                "created_at": "2025-10-02T09:29:16.000Z",
                     58                "updated_at": "2025-10-02T09:29:16.000Z"
                     59            }
                     60        ]
                     61    }

                ┌ --------------------------------------------------------------------------------------------------------------------------------------- ┐
                |                                                                                                                                         |
                  NOTA:   
                    
                    ⦿  Como puede notar, el 'seller' puede obtener todos los usuarios del sistema 'GET usersAll'. esto se debe a que en
                        'backend/routes/userRoutes.js' en la línea 11, se está validando que únicamente los roles autorizados para esta acción sean:
                        'admin' o 'seller'
                |                                                                                                                                         |
                └ --------------------------------------------------------------------------------------------------------------------------------------- ┘


|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 05.07.  Configurar 'GET userById': ----------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Seleccionar el método 'GET userById'
            
            02. Escribir en el control de texto (al frente de 'GET   ▼' | Enter URL or describe the request to Postbot |) la URL de la API 
                (ENDPOINT: /api/users/:id): 'localhost:3000/api/users/2'

            03. Copiar todo el código que está entre comillas del "session_token" de la línea 12, de 'POST login'
            
            04. Dar click en 'Headers', en 'Key' escribir 'Authorization' y en 'Value' pegar el 'JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...' 

            05. Dar click en 'Send'
            
            06. Verificar que la parte inferior aparezca el siguiente código:

                      1    {
                      2        "success": true,
                      3        "message": "Usuario encontrado",
                      4        "data": {
                      5            "id": 2,
                      6            "email": "customer@sistema.com",
                      7            "name": "Customer",
                      8            "lastname": "Sistema",
                      9            "image": "yyyy",
                     10            "phone": "3113113111",
                     11            "role": "customer",
                     12            "password": "$2b$10$lW6ZqX.R8wlHkyYUFQmx8.ElOhbnyfm4HOVf3P6MUB3LCknjUFG8m"
                     13        }
                     14    }


|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 05.08.  Configurar 'POST userUpdate': -------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Seleccionar el método 'POST userUpdates'
            
            02. Escribir en el control de texto (al frente de 'GET   ▼' | Enter URL or describe the request to Postbot |) la URL de la API 
                (ENDPOINT: /api/users/update): 'localhost:3000/api/users/update'

            03. Copiar todo el código que está entre comillas del "session_token" de la línea 12, de 'POST login'
            
            04. Dar click en 'Headers', en 'Key' escribir 'Authorization' y en 'Value' pegar el 'JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...' 

            05. Dar click en 'Body / raw / JSON'

            06. Escribir el siguiente arreglo (clave: valor) en formato JSON:

                      1    {
                      2      "id": "2",
                      3      "email": "customer_modified@modificado.com",
                      4      "name": "Customer",
                      5      "lastname": "Modified",
                      6      "phone": "3163163161",
                      7      "image": "yyyy",
                      8      "password": "12345"
                      9    }
            
            07. Dar click en 'Send'
            
            08. Verificar que la parte inferior aparezca el siguiente código:

                      1    {
                      2        "success": true,
                      3        "message": "Usuario actualizado",
                      4        "data": {
                      5            "id": "2",
                      6            "email": "customer_modified@modificado.com",
                      7            "name": "Customer",
                      8            "lastname": "Modified",
                      9            "phone": "3163163161",
                     10            "image": "yyyy",
                     11            "password": "12345"
                     12        }
                     13    }

            09. Ir a 'http://localhost/phpmyadmin/', para verificar que en la base de datos 'db_node' (tabla 'users'), se haya actualizado el registro

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 05.09.  Configurar 'DELETE userDelete': -----------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
            
            01. Seleccionar el método 'DELETE userDelete'
            
            02. Escribir en el control de texto (al frente de 'GET   ▼' | Enter URL or describe the request to Postbot |) la URL de la API 
                (ENDPOINT: /api/users/delete/:id): 'localhost:3000/api/users/delete/5'

            03. Copiar todo el código que está entre comillas del "session_token" de la línea 12, de 'POST login'
            
            04. Dar click en 'Headers', en 'Key' escribir 'Authorization' y en 'Value' pegar el 'JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...' 

            05. Dar click en 'Send'
            
            07. En la parte inferior aparece el siguiente código:

                      1    {
                      2        "success": false,
                      3        "message": "Acceso denegado: se requiere rol admin"
                      4    }

            07. Repetir los pasos 4, 5, 6 y 7 del apartado: '05.05.  Configurar 'POST login'' para loguearse como 'admin':

                      1    {
                      2        "email": "admin@sistema.com",
                      3        "password": "12345"
                      4    }
            
            08. Repetir los pasos 3, 4 y 5 de este mismo apartado. En la parte inferior debe aparecer el siguiente còdigo:

                      1    {
                      2        "success": true,
                      3        "message": "Usuario eliminado",
                      4        "data": {
                      5            "fieldCount": 0,
                      6            "affectedRows": 1,
                      7            "insertId": 0,
                      8            "serverStatus": 2,
                      9            "warningCount": 0,
                     10            "message": "",
                     11            "protocol41": true,
                     12            "changedRows": 0
                     13        }
                     14    }


            09. Ir a 'http://localhost/phpmyadmin/', para verificar que en la base de datos 'db_node' (tabla 'users'), se haya eliminado el registro


|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||--------------------------------------------------------------------------------------------------------------------------------------------------------------------|||
|||------------------------------------------------------------------------------ ANEXOS ------------------------------------------------------------------------------|||
||| ------------------------------------------------------------------------- TENER EN CUENTA -------------------------------------------------------------------------|||
|||--------------------------------------------------------------------------------------------------------------------------------------------------------------------|||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- AX_01.  Subir el proyecto a un repositorio 'Github': ----------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            Para evitar confusiones y seguir los pasos correctamente, la carpeta raíz del proyecto se llamará 'proyecto'.
            
            01. Verificar que no haya una cuenta de 'Github' asociada al computador, para ello, debe abrir el 'Panel de Control', dar click en 'Cuentas 
                de usuario / Administrar credenciales de Windows'. Si hay una cuenta asociada 'git:https://github.com', dar click sobre la cuenta y click
                sobre la opción 'Quitar'. 
            
                    ⦿  De no funcionar este método porque no tiene acceso al Panel de control, pruebe abriendo el 'Windows PowerShell' y digite el 
                         siguiente comando:

                         PS C:\..\..> echo "protocol=https`nhost=github.com`n" | git credential-manager erase
            
            02. Abrir su cuenta de 'Github' y en la parte superior derecha, dar click al 'Nombre de su cuenta / Your Repositories'. Dar click en 'New'.
                En el control de texto 'Repository name', escribir el nombre de la carpeta raíz de su proyecto (ejemplo, 'proyecto'. La carpeta raíz no debe 
                tener espacios, ni caracteres compuesto, ni caracteres especiales) y dar click en 'Create Repository'.

                    ⦿  Si no tiene cuenta en 'GitHub', debe crear una.
            
            03. Click derecho sobre la carpeta raíz (ejemplo, 'proyecto') y seleccionar la opción 'Open Git Bash here'; si no se 
                encuentra la opción, hay que instalar 'Git'.
            
            04. En el 'Git Bash' escribir lo siguiente:

                    $ git config --global user.name "nombre de su cuenta"
                    $ git config --global user.email "correo de su cuenta"

                    $ git init
                    $ git branch -M main
                    $ git remote add origin https://github.com/SenaProfeAlbeiro/proyecto.git
                    $ git add .
                    $ git commit -m "Subiendo Proyecto"
                    $ git push -u origin main

            05. Va a aparecer una ventana denominada 'Connect to Github', dar click en la opción 'Sign in with your browser', dar click en 'Authentication 
                Succeeded'. Verificar que se haya abierto en el navegador en donde tiene la cuenta activa, de lo contrario hay que escribir nuevamente las
                credenciales de 'Github'. En el 'Git Bash' debe aparecer texto similar al siguiente:

                    Enumerating objects: 3, done.
                    Counting objects: 100% (3/3), done.
                    Writing objects: 100% (3/3), 226 bytes | 226.00 KiB/s, done.
                    Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0)
                    To https://github.com/SenaProfeAlbeiro/proyecto.git
                    * [new branch]      main -> main
                    branch 'main' set up to track 'origin/main'.
            
            06. Actualizar la ventana del navegador donde se encuentra abierta su cuenta de 'Github'
            
            07. Para actualizar la información del proyecto en 'Github', en el 'Git bash' escribir los siguientes comandos:

                    $ git add .
                    $ git commit -m "Comentario del cambio"
                    $ git push

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- AX_02.  Clonar un proyecto 'Github': --------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Abrir su cuenta de 'Github' y en la parte superior derecha, dar click al 'Nombre de su cuenta / Your Repositories'. 

            02. Dar click al proyecto que desea clonar, en el caso del ejemplo es 'proyecto'.

            03. Dar click en la opción '<> Code / Copy url to clipboard'.

            04. Ir a una carpeta de Windows, por ejemplo, en el 'C:\xampp\htdocs' (en el caso del ejemplo, 'proyecto').

            05. Click derecho sobre el área de trabajo y seleccionar la opción 'Open Git Bash here'; si no se encuentra la opción, hay que instalar 
                'Git'.
 
            06. En el 'Git Bash' pegar el repositorio clonado de 'Github' con 'CTRL + INSERT', quedando como sigue:

                         $ git clone https://github.com/SenaProfeAlbeiro/proyecto.git

                    ⦿  Si el proyecto ya se encuentra en el computador, puede utilizar el siguiente comando para actualizar la información:
                    
                         $ git pull
            
            07. Abrir el proyecto en Visual Studio Code.


|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- AX_03.  Cambiar los puertos de 'Apache' en 'XAMPP': -----------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
                         
            01. En el Panel de control de XAMPP y en la misma línea del servicio 'Apache' dar click en 'Config / Apache (httpd.conf)'.
            
            02. Se abrirá un 'Bloc de Notas'. Dar click en la opción 'Edición / Buscar...' (o presionar las teclas 'CTRL + B').
            
            03. En la ventana emergente y en el control de texto 'Buscar: ', escribir '80' y dar click en 'Buscar siguiente'.
            
            04. Reemplazar todos los valores donde se encentre el puerto '80' con el puerto nuevo de trabajo, por ejemplo, '8080'. Dar click en 
                'cancelar' y guardar los cambios en el archivo.

            05. En el Panel de control de XAMPP dar click en 'start' de 'Apache' para iniciar el servicio.
            
            06. Comprobar que quedó de la forma correcta a través del navegador, con el siguiente enlace:

                         http://localhost:8080/proyecto/
            

|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- AX_04.  Cambiar los puertos de 'MySQL' en 'XAMPP': ------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. En el Panel de control de XAMPP y en la misma línea del servicio 'MySQL' dar click en 'Config / my.ini'.

            02. Se abrirá un 'Bloc de Notas'. Dar click en la opción 'Edición / Buscar...' (o presionar las teclas 'CTRL + B').
            
            03. En la ventana emergente y en el control de texto 'Buscar: ', escribir '3306' y dar click en 'Buscar siguiente'.

            04. Reemplazar todos los valores donde se encentre el puerto '3306' con el puerto nuevo de trabajo, por ejemplo, '3308'. Dar click en 
                'cancelar' y guardar los cambios en el archivo.

            05. En el Panel de control de XAMPP y en la misma línea del servicio 'Apache' dar click en 'Config / Apache (php.ini)'.

            06. Se abrirá un 'Bloc de Notas'. Dar click en la opción 'Edición / Buscar...' (o presionar las teclas 'CTRL + B').

            07. En la ventana emergente y en el control de texto 'Buscar: ', escribir '3306' y dar click en 'Buscar siguiente'.

            08. Reemplazar todos los valores donde se encentre el puerto '3306' con el puerto nuevo de trabajo, por ejemplo, '3308'. Dar click en 
                'cancelar' y guardar los cambios en el archivo.
        
            09. En el Panel de control de XAMPP y en la misma línea del servicio 'Apache' dar click en 'Config / phpMyAdmin (config.inc.php)'.

            10. Buscar la línea '$cfg['Servers'][$i]['host'] = '127.0.0.1;' y agregar el puerto nuevo '3308' de la siguiente forma:
                         
                         $cfg['Servers'][$i]['host'] = '127.0.0.1:3308';

            11. En el Panel de control de XAMPP dar click en 'start' de 'MySQL' para iniciar el servicio.

            12. Comprobar que quedó de la forma correcta a través del navegador, con el siguiente enlace:

                         http://localhost:8080/phpmyadmin/            


|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- AX_05.  Puesta en marcha del proyecto: ------------------------------------------------------------------------------------------------------------------------------|
|------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

            01. Garantizar el ambiente de desarrollo (Ver apartado 01. ENTORNO DE DESARROLLO).
            
            02. Clonar el proyecto desde github en 'C:\xampp\htdocs' (Ver apartado AX_02. Clonar un proyecto 'Github').
            
            03. Abrir el proyecto en Visual Studio Code.
            
            04. Abrir 'XAMPP' y ejecutar los servicios de 'Apache' y 'MySQL'.

            05. Abrir un navegador (preferiblemente Google Chrome) a través de los siguientes enlaces:
            
                    http://localhost/proyecto/

                    http://localhost/phpmyadmin/            
            
                    ⦿  Si el puerto de 'Apache' en 'XAMPP' es diferente al '80' y si es posible, cambiar el puerto al '80' (Ver apartado AX_03. 
                         Cambiar los puertos de 'Apache' en 'XAMPP'); si no es posible, agregar el puerto al 'localhost', por ejemplo, si el puerto 
                         es '8080' entonces debería quedar así:

                         http://localhost:8080/proyecto/

                         http://localhost:8080/phpmyadmin/            
            
                    ⦿  Si el puerto de 'MySQL' en 'XAMPP' es diferente al '3306' y si es posible, cambiar el puerto al '3306' (Ver apartado AX_04. 
                         Cambiar los puertos de 'MySQL' en 'XAMPP').
                                    
            06. Subir la base de datos (Ver el apartado 03. BASE DE DATOS).

            07. Comprobar que se ejecute correctamente la aplicación.